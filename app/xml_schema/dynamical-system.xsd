<?xml version="1.0" encoding="UTF-8" ?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">

<xsd:include schemaLocation="variable-settings.xsd"/>
<xsd:include schemaLocation="drivers.xsd"/>
<xsd:include schemaLocation="module-set.xsd"/>

<xsd:element name="dynamical-system">
  <xsd:complexType>
    <xsd:all>
      <xsd:annotation>
        <xsd:documentation>
          A "real" dynamical system requires at least one differential
          module together with an initial state that sets the initial
          values of all the variables that the differential module
          computes derivatives for.

          Formally, however, the only child element of
          dynamical-system that is required is some variety of the
          (abstract) "driver-info" element--either a "drivers" element
          to set the drivers explicitly within the dynamical system
          element; a "driver-placeholder" element to indicate that the
          drivers will be provided in a separate document; or a
          "duration" element, to indicate that the system is
          autonomous and to specify how many simulation steps should
          be run, and the time interval between steps.
        </xsd:documentation>
      </xsd:annotation>
      <xsd:element name="parameters" minOccurs="0" type="variable-settings"/>
      <xsd:element name="initial-state" minOccurs="0" type="variable-settings"/>
      <xsd:element ref="driver-info"/>
      <xsd:element name="direct-modules" type="module-set" minOccurs="0"/>
      <xsd:element name="differential-modules" type="module-set" minOccurs="0"/>
    </xsd:all>
  </xsd:complexType>
  <xsd:unique name="variable-names">
    <xsd:annotation>
      <xsd:documentation>
        The selector selects the variable elements within the
        parameters and initial-state elements to ensure no variable
        appears in both groups or more than once in one group.

        If schema validation is turned off, uniqueness of variable
        names is enforced at the program level, but at a later stage.
        The program also ensures that variables in the parameters and
        initial state are distinct from those in the driver rows,
        something that can't easily be enforced by XML Schema.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:selector xpath="parameters/variable|initial-state/variable"/>
    <xsd:field xpath="@name"/>
  </xsd:unique>
  <xsd:unique name="module-names">
    <xsd:annotation>
      <xsd:documentation>
        The selector selects the module elements within the
        direct-modules and differential-modules elements to ensure no
        module appears in both groups or more than once in one group.

        If schema validation is turned off, uniqueness of module names
        within either the set of direct modules or the set of
        differential modules is enforced at the program level, but at
        a later stage.  Disjointness of the two sets is also
        (indirectly) enforced at the program level, but only at the
        stage where the biocro_simulation object is constructed from
        the Simulation_definition object.  (Construction fails because
        output variables of a differential module must all be
        contained in the set of initial state variables, whereas
        output variables of a direct module must be disjoint from the
        set of initial state variables.)

        One thing that isn't enforced, either by the schema or at the
        program level is that the modules included in the sets of
        direct and differential modules are of the correct type (i.e.,
        direct or differential, respectively).
      </xsd:documentation>
    </xsd:annotation>
    <xsd:selector xpath="differential-modules/module|direct-modules/module"/>
    <xsd:field xpath="@name"/>
  </xsd:unique>
</xsd:element>

</xsd:schema>
